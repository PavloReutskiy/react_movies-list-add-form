{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","validation.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","validationUrl","useState","Math","random","toString","slice","id","touched","setToched","hasError","isUrlValid","htmlFor","classNames","type","placeholder","event","target","onBlur","patternUrl","url","test","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isFormValid","setIsFormValid","isImgUrlValid","setIsImgUrlValid","isImdbUrlValid","setIsImdbUrlValid","useEffect","trim","onSubmit","preventDefault","current","newValue","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9cffc501.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  validationUrl?: (url: string) => boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  validationUrl,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n  const isUrlValid = validationUrl && value && !validationUrl(value);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || isUrlValid,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n      {!hasError && isUrlValid && (\n        <p className=\"help is-danger\">URL is invalid</p>\n      )}\n    </div>\n  );\n};\n","// eslint-disable-next-line max-len\nexport const patternUrl = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\nexport const validationUrl = (url?: string) => {\n  if (!url) {\n    return false;\n  }\n\n  return patternUrl.test(url);\n};\n","import { useEffect, useState } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\nimport { validationUrl } from '../../validation';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [isFormValid, setIsFormValid] = useState(false);\n  const [isImgUrlValid, setIsImgUrlValid] = useState(false);\n  const [isImdbUrlValid, setIsImdbUrlValid] = useState(false);\n\n  useEffect(() => {\n    setIsFormValid(isImgUrlValid\n      && isImdbUrlValid\n      && title.trim() !== ''\n      && imgUrl.trim() !== ''\n      && imdbUrl.trim() !== ''\n      && imdbId.trim() !== '');\n  }, [title, imgUrl, imdbUrl, imdbId, isImgUrlValid, isImdbUrlValid]);\n\n  const handleTitleChange = (newValue: string) => {\n    setTitle(newValue);\n  };\n\n  const handleDescriptionChange = (newValue: string) => {\n    setDescription(newValue);\n  };\n\n  const handleImgUrlChange = (newValue: string) => {\n    setImgUrl(newValue);\n    setIsImgUrlValid(validationUrl(newValue));\n  };\n\n  const handleImdbUrlChange = (newValue: string) => {\n    setImdbUrl(newValue);\n    setIsImdbUrlValid(validationUrl(newValue));\n  };\n\n  const handleImdbIdChange = (newValue: string) => {\n    setImdbId(newValue);\n  };\n\n  const clearFormFields = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        setCount(current => current + 1);\n\n        onAdd({\n          title,\n          description,\n          imgUrl,\n          imdbUrl,\n          imdbId,\n        });\n\n        clearFormFields();\n      }}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={handleTitleChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={handleImgUrlChange}\n        validationUrl={validationUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={handleImdbUrlChange}\n        validationUrl={validationUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={handleImdbIdChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isFormValid}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { Movie } from './types/Movie';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const handleAdditionMovie = (movie: Movie) => {\n    setMovies([...movies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={handleAdditionMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}